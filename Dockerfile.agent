# Multi-stage build for optimized dependency installation
FROM python:3.9-slim as builder

# Set up environment
WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first to leverage Docker cache
COPY requirements.txt .

# Create a virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install dependencies in groups to better manage timeouts
# First, install core dependencies
RUN pip install --upgrade pip && \
    pip install pandas requests python-dotenv werkzeug==2.0.1 flask==2.0.1 gunicorn==20.1.0

# Then install machine learning libraries
RUN pip install torch --index-url https://download.pytorch.org/whl/cpu

# Install NLP dependencies
RUN pip install spacy sentence-transformers fuzzywuzzy python-Levenshtein && \
    pip install https://github.com/explosion/spacy-models/releases/download/es_core_news_sm-3.7.0/es_core_news_sm-3.7.0-py3-none-any.whl

# Install vector DB and search dependencies
RUN pip install weaviate-client==4.12.0 duckduckgo-search

# Finally install LangChain and LangGraph
RUN pip install langgraph langchain langchain_google_genai==2.1.4

# Second stage: runtime image
FROM python:3.9-slim

# Set environment variables
WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    PORT=8080

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY . .

# Copy .env file from nodes directory if it exists
RUN if [ -f "nodes/.env" ]; then cp nodes/.env .env; fi

# Run the application with gunicorn for production
CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 0 main:app